{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nexport class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n\n  ngOnInit() {}\n\n  handleFormSubmit(value) {\n    let email = value.email;\n    let password = value.password;\n    this.authService.login(email, password).subscribe({\n      next: () => {\n        // sessionStorage.setItem('email', result.data)\n        // sessionStorage.setItem('authToken', result.accessToken)\n        // sessionStorage.setItem('userId', result._id)\n        this.router.navigate(['/']);\n      },\n      error: e => console.error(e)\n    });\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 24,\n  vars: 7,\n  consts: [[1, \"login\", 3, \"formGroup\", \"ngSubmit\"], [1, \"field\", \"field-icon\"], [\"for\", \"email\"], [1, \"fas\", \"fa-envelope\"], [\"formControlName\", \"email\", \"type\", \"email\", \"name\", \"email\", \"id\", \"email\", \"placeholder\", \"john.doe@gmail.com\"], [\"for\", \"password\"], [1, \"fas\", \"fa-lock\"], [\"formControlName\", \"password\", \"type\", \"password\", \"name\", \"password\", \"id\", \"password\", \"placeholder\", \"******\"], [3, \"disabled\", \"click\"], [1, \"text-center\"], [\"href\", \"#\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.handleFormSubmit();\n      });\n      i0.ɵɵelementStart(1, \"fieldset\")(2, \"h2\");\n      i0.ɵɵtext(3, \"Login Form\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\", 1)(5, \"label\", 2)(6, \"span\");\n      i0.ɵɵelement(7, \"i\", 3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"p\", 1)(10, \"label\", 5)(11, \"span\");\n      i0.ɵɵelement(12, \"i\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\");\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_17_listener() {\n        return ctx.loginHandler();\n      });\n      i0.ɵɵpipe(18, \"async\");\n      i0.ɵɵtext(19, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"p\", 9);\n      i0.ɵɵtext(21, \" Have an account? \");\n      i0.ɵɵelementStart(22, \"a\", 10);\n      i0.ɵɵtext(23, \"Register\");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginFormGroup);\n      i0.ɵɵadvance(15);\n      i0.ɵɵtextInterpolate1(\" IsLoginPending: \", i0.ɵɵpipeBind1(16, 3, ctx.isLoginPending$), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", i0.ɵɵpipeBind1(18, 5, ctx.isLoginPending$));\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;AASA,OAAM,MAAOA,cAAP,CAAqB;EAEzBC,YAAoBC,WAApB,EAAsDC,MAAtD,EAAoE;IAAhD;IAAkC;EAAmB;;EAEzEC,QAAQ,IACP;;EACDC,gBAAgB,CAACC,KAAD,EAA2C;IACzD,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;IACA,IAAIC,QAAQ,GAAGF,KAAK,CAACE,QAArB;IACA,KAAKN,WAAL,CAAiBO,KAAjB,CAAuBF,KAAvB,EAA8BC,QAA9B,EAAwCE,SAAxC,CAAkD;MAChDC,IAAI,EAAE,MAAK;QACT;QACA;QACA;QACA,KAAKR,MAAL,CAAYS,QAAZ,CAAqB,CAAC,GAAD,CAArB;MACD,CAN+C;MAOhDC,KAAK,EAAGC,CAAD,IAAOC,OAAO,CAACF,KAAR,CAAcC,CAAd;IAPkC,CAAlD;EASD;;AAlBwB;;;mBAAdd,gBAAcgB;AAAA;;;QAAdhB;EAAciB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCM3BL;MAAiDA;QAAA,OAAYM,sBAAZ;MAA8B,CAA9B;MAC7CN,iCAAU,CAAV,EAAU,IAAV;MACQA;MAAUA;MAMdA,6BAA4B,CAA5B,EAA4B,OAA5B,EAA4B,CAA5B,EAA4B,CAA5B,EAA4B,MAA5B;MAC6BA;MAA+BA;MACxDA;MACJA;MAWAA,6BAA4B,EAA5B,EAA4B,OAA5B,EAA4B,CAA5B,EAA4B,EAA5B,EAA4B,MAA5B;MACgCA;MAA2BA;MACvDA;MACJA;MAYAA;MACIA;;MACJA;MACAA;MAA+CA;QAAA,OAASM,kBAAT;MAAuB,CAAvB;;MAAyBN;MAAKA;MAE7EA;MACIA;MACAA;MAAYA;MAAQA;;;;MA5CZA;MAsCRA;MAAAA;MAEIA;MAAAA","names":["LoginComponent","constructor","authService","router","ngOnInit","handleFormSubmit","value","email","password","login","subscribe","next","navigate","error","e","console","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/emineshaban/Documents/GitHub/Project/src/app/core/auth/login/login.component.ts","/Users/emineshaban/Documents/GitHub/Project/src/app/core/auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from \"../../service/auth.service\";\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  handleFormSubmit(value: { email: string, password: string }): void {\n    let email = value.email\n    let password = value.password\n    this.authService.login(email, password).subscribe({\n      next: () => {\n        // sessionStorage.setItem('email', result.data)\n        // sessionStorage.setItem('authToken', result.accessToken)\n        // sessionStorage.setItem('userId', result._id)\n        this.router.navigate(['/']);\n      },\n      error: (e) => console.error(e)\n    });\n  }\n}\n","<!-- <form #createForm=\"ngForm\" (ngSubmit)=\"handleFormSubmit(createForm.value)\">\n \n    <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"john.doe@gmail.com\" ngModel>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input type=\"text\" name=\"password\" id=\"password\" placeholder=\"******\" ngModel>\n    </div>\n    <button>Create</button>\n</form> -->\n\n\n<form class=\"login\" [formGroup]=\"loginFormGroup\" (ngSubmit)=\"handleFormSubmit()\">\n    <fieldset>\n        <h2>Login Form</h2>\n<!-- \n        <p *ngIf=\"(errorMessage$ | async) as errorMessage\" class=\"error\">\n            {{errorMessage}}\n        </p> -->\n\n        <p class=\"field field-icon\">\n            <label for=\"email\"><span><i class=\"fas fa-envelope\"></i></span></label>\n            <input formControlName=\"email\" type=\"email\" name=\"email\" id=\"email\" placeholder=\"john.doe@gmail.com\">\n        </p>\n        <!-- <ng-container *ngIf=\"loginFormGroup.controls['email'].touched && loginFormGroup.controls['email'].invalid\">\n            <p *ngIf=\"loginFormGroup.controls['email'].errors.required\" class=\"error\">\n                Email is required!\n            </p> -->\n<!-- \n            <p *ngIf=\"loginFormGroup.controls['email'].errors.email\" class=\"error\">\n                Email is not valid!\n            </p>\n        </ng-container> -->\n\n        <p class=\"field field-icon\">\n            <label for=\"password\"><span><i class=\"fas fa-lock\"></i></span></label>\n            <input formControlName=\"password\" type=\"password\" name=\"password\" id=\"password\" placeholder=\"******\">\n        </p>\n<!-- \n        <ng-container\n            *ngIf=\"loginFormGroup.controls['password'].touched && loginFormGroup.controls['password'].invalid\">\n            <p *ngIf=\"loginFormGroup.controls['password'].errors.required\" class=\"error\">\n                Password is required!\n            </p>\n            <p *ngIf=\"loginFormGroup.controls['password'].errors.minlength\" class=\"error\">\n                Password must be at least 5 characters!\n            </p>\n        </ng-container> -->\n\n        <div>\n            IsLoginPending: {{(isLoginPending$ | async)}}\n        </div>\n        <button [disabled]=\"(isLoginPending$ | async)\" (click)=\"loginHandler()\">Login</button>\n\n        <p class=\"text-center\">\n            Have an account?\n            <a href=\"#\">Register</a>\n        </p>\n\n    </fieldset>\n</form>"]},"metadata":{},"sourceType":"module"}